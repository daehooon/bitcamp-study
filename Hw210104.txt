- 학습 목표 달성 확인 목록
    - [] 서버 컴퓨터와 서버 프로그램의 관계를 이해하는가?
        : 서버 컴퓨터에서 받아온 정보를 서버 프로그램을 실행. 주고 받는다.
    - [] 서버 프로그램과 데스크톱 프로그램을 구분할 수 있는가?
	: 별도의 프로그램 설치 없이 사용가능한 웹과 같은 프로그램이 서버 프로그램이고,
	  사용자 local에 프로그램을 다운로드받아서 오프라인 상태에서도 사용 가능한 엑셀과 같은 프로그램이
          데스크톱 프로그램이다.
    - [] 클라이언트 프로그램이 무엇인지 이해하고 있는가?
	: 서버에서 받아온 정보를 토대로 프로그램을 구동(오프라인 구동 x)
    - [] 클라이언트/서버 구조로 된 애플리케이션의 예를 들 수 있는가?
	: 온라인게임(오버워치), 카카오톡, 날씨 앱
    - [] git 클라이언트 프로그램을 설치할 수 있는가?
	: git client 검색 후 사용자 OS 에 따라 설치
    - [] macOS 패키지 관리자 프로그램인 HomeBrew 를 설치할 수 있는가?
    - [] HomeBrew 패키지 관리자를 통해 git 프로그램을 설치할 수 있는가?
    - [] github.com에서 깃 저장소를 생성할 수 있는가?
	: github.com/사용자이름?tab=repositories -> new
    - [] git 서버의 저장소를 로컬로 복제할 수 있는가?
	: git clone https://github.com/daehooon/bitcamp-study.git
    - [] 로컬에서 작업한 파일을 로컬 깃 저장소에 백업할 수 있는가?
	: git add . -> git commit -m "백업에 대한 간단한 내용"
    - [] 로컬 깃 저장소에 백업한 내용을 깃 서버의 저장소에 업로드 할 수 있는가?
	: git push
    - [] 컴퓨터에서 CPU와 RAM, HDD 의 관계 및 역할을 이해하고 있는가?
	: CPU 명령어 처리, 저장, 데이터 저장 <-(loading) RAM 순간기억장치 <-(복사loading) HDD 저장소
    - [] OS의 역할을 대략적으로 이해하는가?
	: 하드웨어들을 연결하고 사용자 환경에 맞게 출력하는 프로그램
    - [] 명령어를 작성할 때 CPU에 맞춰서 작성해야 하고 또한 OS에 맞춰서 명령어를 구성해야 하는
         이유를 설명할 수 있는가?
	: 호환이 안되기 때문
    - [] 명령어를 작성할 때 컴파일러의 역할은 무엇인가?
	: 기계어와 유사한 중간언어로 된 바이트코드를 만들어준다.
    - [] 컴파일러가 OS와 CPU에 따라 구분되는 이유를 아는가?
	: 명령어의 문법과 같은 규칙과 방식이 각기다르기 때문
    - [] 자바 컴파일러가 들어 있는 JDK를 설치할 때 OS와 CPU에 따라 구분해야 하는 이유를 아는가?
	: 호환 문제
    - [] 자바 컴파일러와 JVM의 역할을 설명할 수 있는가?
	: 자바 컴파일러가 컴파일 하게되면 별다른 컴파일러 사용없이 JVM을 통해 모든 PC환경에서 사용 가능하다.
    - [] 소스(source)와 바이트코드(bytecode)를 설명할 수 있는가?
	: 기계어와 가까운 자바의 원본 코드 파일 = source, 기계어와 유사한 중간언어로 된 코드 파일 = bytecode
    - [] 자바 컴파일러를 사용하여 소스 파일을 컴파일 할 수 있는가?
	: 콘솔창에서 $javac Hello.java (Windows에서는 .exe 생략 가능)
    - [] JVM을 사용하여 바이트코드를 실행할 수 있는가?
	: 콘솔창에서 $java Hello
    - [] 컴파일 방식과 인터프리터 방식의 차이점과 장단점을 이해하는가?
	: 컴파일은 OS와 CPU에 종속적이다. 장점은 컴파일할때만 문법검사로 인해 빠르다, 단점은 OS와 CPU따라서 따로 컴파일해야함
          인터프리터는 source 파일을 바로 실행 가능하다. 장점은 각 OS별로 컴파일 필요 x, 단점은 실행할때마다 문법검사로 인해 느리다.
    - [] 자바는 하이브리드 방식으로 프로그램을 개발하고 실행한다. 하이브리드 방식을 설명할 수 있는가?
	: 컴파일 방식 + 인터프리터 방식 = 하이브리드 방식
          *.java 컴파일 -> *.class (가상의 기계어, CPU 명령 x) -> OS별 JVM으로 bytecode를 실행